/*
 * --------------------------------------------------------
 *  Module Name : global-coordinator-upnp
 *  Version : 0.1-SNAPSHOT
 *
 *  Software Name : HomeNap
 *  Version : 0.1-SNAPSHOT
 *
 *  Copyright © 28/06/2012 – 28/06/2012 France Télécom
 *  This software is distributed under the Apache 2.0 license,
 *  the text of which is available at http://www.apache.org/licenses/LICENSE-2.0.html
 *  or see the "LICENSE-2.0.txt" file for more details.
 *
 * --------------------------------------------------------
 *  File Name   : GlobalCoordinatorService.java
 *
 *  Created     : 28/06/2012
 *  Author(s)   : Remi Druilhe
 *
 *  Description :
 *
 *  generated by France Telecom UPnP Generator
 *
 * --------------------------------------------------------
 */

package com.orange.homenap.globalcoordinator.upnp.services;


import java.util.Hashtable;
import java.util.HashMap;
import java.util.Map;
import java.util.Dictionary;

import com.orange.homenap.globalcoordinator.upnp.holders.*;
import com.orange.homenap.api.IGlobalCoordinatorService;
import org.osgi.framework.BundleContext;
import org.osgi.framework.ServiceRegistration;
import org.osgi.service.upnp.UPnPService;

/**
	* This is the class representing a GlobalCoordinatorService
	*/
public class GlobalCoordinatorService implements IGlobalCoordinatorService{
	UPnPService service;
	Map map=new HashMap();
	BundleContext context;
	ServiceRegistration registration;
	GlobalCoordinatorServiceSkel skel;
	String deviceId;

	public GlobalCoordinatorService(UPnPService service,String deviceId,BundleContext context) {
		this.context=context;
		this.service=service;
		this.deviceId=deviceId;
	}
	public UPnPService getGenericService() {
		return service;
	}
	/**
	* OSGI Stub for UPnP action UpdateServicesState
	*/
	public void updateServicesState(java.lang.String deviceId, java.lang.String servicesState) throws Exception {
		Dictionary dict = null;
		dict = new Hashtable(2);
		dict.put(new String("DeviceId"), deviceId);
		dict.put(new String("ServicesState"), servicesState);
		Hashtable result=null;
		try {
		result=(Hashtable)service.getAction("UpdateServicesState").invoke(dict);
		}
		catch (NullPointerException ex) {
			throw new UPnPGenException("The action is not availaible on the device: It may be an optional action...");
		}
	}
	/**
	* OSGI Stub for UPnP action UpdateDeviceState
	*/
	public void updateDeviceState(java.lang.String deviceId, java.lang.String state) throws Exception {
		Dictionary dict = null;
		dict = new Hashtable(2);
		dict.put(new String("DeviceId"), deviceId);
		dict.put(new String("State"), state);
		Hashtable result=null;
		try {
		result=(Hashtable)service.getAction("UpdateDeviceState").invoke(dict);
		}
		catch (NullPointerException ex) {
			throw new UPnPGenException("The action is not availaible on the device: It may be an optional action...");
		}
	}
	/**
	* OSGI Stub for UPnP action Register
	*/
	public boolean register(java.lang.String deviceInfo) throws Exception {
		Dictionary dict = null;
		dict = new Hashtable(1);
		dict.put(new String("DeviceInfo"), deviceInfo);
		Hashtable result=null;
		try {
		result=(Hashtable)service.getAction("Register").invoke(dict);
		}
		catch (NullPointerException ex) {
			throw new UPnPGenException("The action is not availaible on the device: It may be an optional action...");
		}
		boolean value0=false;
		try {
			value0=((java.lang.Boolean)result.get("Success")).booleanValue();
		}
		catch (Exception ex) {
			int number = ((Integer)result.get("Success")).intValue();
			if(number == 1) value0 = true;
			else value0 = false;
		}
		return value0;
	}
	/**
	* OSGI Stub for UPnP action UnRegister
	*/
	public boolean unRegister(java.lang.String deviceId) throws Exception {
		Dictionary dict = null;
		dict = new Hashtable(1);
		dict.put(new String("DeviceId"), deviceId);
		Hashtable result=null;
		try {
		result=(Hashtable)service.getAction("UnRegister").invoke(dict);
		}
		catch (NullPointerException ex) {
			throw new UPnPGenException("The action is not availaible on the device: It may be an optional action...");
		}
		boolean value0=false;
		try {
			value0=((java.lang.Boolean)result.get("Success")).booleanValue();
		}
		catch (Exception ex) {
			int number = ((Integer)result.get("Success")).intValue();
			if(number == 1) value0 = true;
			else value0 = false;
		}
		return value0;
	}
}
